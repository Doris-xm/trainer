# coding: utf-8

"""
    Kubeflow Trainer OpenAPI Spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kubeflow_trainer_api.models.io_k8s_apimachinery_pkg_api_resource_quantity import IoK8sApimachineryPkgApiResourceQuantity
from kubeflow_trainer_api.models.scheduling_v1beta1_affinity import SchedulingV1beta1Affinity
from kubeflow_trainer_api.models.scheduling_v1beta1_cluster import SchedulingV1beta1Cluster
from kubeflow_trainer_api.models.scheduling_v1beta1_guarantee import SchedulingV1beta1Guarantee
from typing import Optional, Set
from typing_extensions import Self

class SchedulingV1beta1QueueSpec(BaseModel):
    """
    QueueSpec represents the template of Queue.
    """ # noqa: E501
    affinity: Optional[SchedulingV1beta1Affinity] = Field(default=None, description="If specified, the pod owned by the queue will be scheduled with constraint")
    capability: Optional[Dict[str, IoK8sApimachineryPkgApiResourceQuantity]] = None
    deserved: Optional[Dict[str, IoK8sApimachineryPkgApiResourceQuantity]] = Field(default=None, description="The amount of resources configured by the user. This part of resource can be shared with other queues and reclaimed back.")
    extend_clusters: Optional[List[SchedulingV1beta1Cluster]] = Field(default=None, description="extendCluster indicate the jobs in this Queue will be dispatched to these clusters.", alias="extendClusters")
    guarantee: Optional[SchedulingV1beta1Guarantee] = Field(default=None, description="Guarantee indicate configuration about resource reservation")
    parent: Optional[StrictStr] = Field(default=None, description="Parent define the parent of queue")
    priority: Optional[StrictInt] = Field(default=None, description="Priority define the priority of queue. Higher values are prioritized for scheduling and considered later during reclamation.")
    reclaimable: Optional[StrictBool] = Field(default=None, description="Reclaimable indicate whether the queue can be reclaimed by other queue")
    type: Optional[StrictStr] = Field(default=None, description="Type define the type of queue")
    weight: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["affinity", "capability", "deserved", "extendClusters", "guarantee", "parent", "priority", "reclaimable", "type", "weight"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SchedulingV1beta1QueueSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of affinity
        if self.affinity:
            _dict['affinity'] = self.affinity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in capability (dict)
        _field_dict = {}
        if self.capability:
            for _key_capability in self.capability:
                if self.capability[_key_capability]:
                    _field_dict[_key_capability] = self.capability[_key_capability].to_dict()
            _dict['capability'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in deserved (dict)
        _field_dict = {}
        if self.deserved:
            for _key_deserved in self.deserved:
                if self.deserved[_key_deserved]:
                    _field_dict[_key_deserved] = self.deserved[_key_deserved].to_dict()
            _dict['deserved'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in extend_clusters (list)
        _items = []
        if self.extend_clusters:
            for _item_extend_clusters in self.extend_clusters:
                if _item_extend_clusters:
                    _items.append(_item_extend_clusters.to_dict())
            _dict['extendClusters'] = _items
        # override the default output from pydantic by calling `to_dict()` of guarantee
        if self.guarantee:
            _dict['guarantee'] = self.guarantee.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SchedulingV1beta1QueueSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "affinity": SchedulingV1beta1Affinity.from_dict(obj["affinity"]) if obj.get("affinity") is not None else None,
            "capability": dict(
                (_k, IoK8sApimachineryPkgApiResourceQuantity.from_dict(_v))
                for _k, _v in obj["capability"].items()
            )
            if obj.get("capability") is not None
            else None,
            "deserved": dict(
                (_k, IoK8sApimachineryPkgApiResourceQuantity.from_dict(_v))
                for _k, _v in obj["deserved"].items()
            )
            if obj.get("deserved") is not None
            else None,
            "extendClusters": [SchedulingV1beta1Cluster.from_dict(_item) for _item in obj["extendClusters"]] if obj.get("extendClusters") is not None else None,
            "guarantee": SchedulingV1beta1Guarantee.from_dict(obj["guarantee"]) if obj.get("guarantee") is not None else None,
            "parent": obj.get("parent"),
            "priority": obj.get("priority"),
            "reclaimable": obj.get("reclaimable"),
            "type": obj.get("type"),
            "weight": obj.get("weight")
        })
        return _obj


