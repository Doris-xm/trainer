# coding: utf-8

"""
    Kubeflow Trainer OpenAPI Spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kubeflow_trainer_api.models.io_k8s_apimachinery_pkg_api_resource_quantity import IoK8sApimachineryPkgApiResourceQuantity
from kubeflow_trainer_api.models.scheduling_v1beta1_network_topology_spec import SchedulingV1beta1NetworkTopologySpec
from typing import Optional, Set
from typing_extensions import Self

class SchedulingV1beta1PodGroupSpec(BaseModel):
    """
    PodGroupSpec represents the template of a pod group.
    """ # noqa: E501
    min_member: Optional[StrictInt] = Field(default=None, description="MinMember defines the minimal number of members/tasks to run the pod group; if there's not enough resources to start all tasks, the scheduler will not start anyone.", alias="minMember")
    min_resources: Optional[Dict[str, IoK8sApimachineryPkgApiResourceQuantity]] = Field(default=None, description="MinResources defines the minimal resource of members/tasks to run the pod group; if there's not enough resources to start all tasks, the scheduler will not start anyone.", alias="minResources")
    min_task_member: Optional[Dict[str, StrictInt]] = Field(default=None, description="MinTaskMember defines the minimal number of pods to run each task in the pod group; if there's not enough resources to start each task, the scheduler will not start anyone.", alias="minTaskMember")
    network_topology: Optional[SchedulingV1beta1NetworkTopologySpec] = Field(default=None, description="NetworkTopology defines the NetworkTopology config, this field works in conjunction with network topology feature and hyperNode CRD.", alias="networkTopology")
    priority_class_name: Optional[StrictStr] = Field(default=None, description="If specified, indicates the PodGroup's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the PodGroup priority will be default or zero if there is no default.", alias="priorityClassName")
    queue: Optional[StrictStr] = Field(default=None, description="Queue defines the queue to allocate resource for PodGroup; if queue does not exist, the PodGroup will not be scheduled. Defaults to `default` Queue with the lowest weight.")
    __properties: ClassVar[List[str]] = ["minMember", "minResources", "minTaskMember", "networkTopology", "priorityClassName", "queue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SchedulingV1beta1PodGroupSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in min_resources (dict)
        _field_dict = {}
        if self.min_resources:
            for _key_min_resources in self.min_resources:
                if self.min_resources[_key_min_resources]:
                    _field_dict[_key_min_resources] = self.min_resources[_key_min_resources].to_dict()
            _dict['minResources'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of network_topology
        if self.network_topology:
            _dict['networkTopology'] = self.network_topology.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SchedulingV1beta1PodGroupSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "minMember": obj.get("minMember"),
            "minResources": dict(
                (_k, IoK8sApimachineryPkgApiResourceQuantity.from_dict(_v))
                for _k, _v in obj["minResources"].items()
            )
            if obj.get("minResources") is not None
            else None,
            "minTaskMember": obj.get("minTaskMember"),
            "networkTopology": SchedulingV1beta1NetworkTopologySpec.from_dict(obj["networkTopology"]) if obj.get("networkTopology") is not None else None,
            "priorityClassName": obj.get("priorityClassName"),
            "queue": obj.get("queue")
        })
        return _obj


