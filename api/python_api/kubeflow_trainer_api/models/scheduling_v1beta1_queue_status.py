# coding: utf-8

"""
    Kubeflow Trainer OpenAPI Spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kubeflow_trainer_api.models.io_k8s_apimachinery_pkg_api_resource_quantity import IoK8sApimachineryPkgApiResourceQuantity
from kubeflow_trainer_api.models.scheduling_v1beta1_reservation import SchedulingV1beta1Reservation
from typing import Optional, Set
from typing_extensions import Self

class SchedulingV1beta1QueueStatus(BaseModel):
    """
    QueueStatus represents the status of Queue.
    """ # noqa: E501
    allocated: Optional[Dict[str, IoK8sApimachineryPkgApiResourceQuantity]] = Field(default=None, description="Allocated is allocated resources in queue")
    completed: Optional[StrictInt] = Field(default=None, description="The number of `Completed` PodGroup in this queue.")
    inqueue: Optional[StrictInt] = Field(default=None, description="The number of `Inqueue` PodGroup in this queue.")
    pending: Optional[StrictInt] = Field(default=None, description="The number of 'Pending' PodGroup in this queue.")
    reservation: Optional[SchedulingV1beta1Reservation] = Field(default=None, description="Reservation is the profile of resource reservation for queue")
    running: Optional[StrictInt] = Field(default=None, description="The number of 'Running' PodGroup in this queue.")
    state: Optional[StrictStr] = Field(default=None, description="State is state of queue")
    unknown: Optional[StrictInt] = Field(default=None, description="The number of 'Unknown' PodGroup in this queue.")
    __properties: ClassVar[List[str]] = ["allocated", "completed", "inqueue", "pending", "reservation", "running", "state", "unknown"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SchedulingV1beta1QueueStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in allocated (dict)
        _field_dict = {}
        if self.allocated:
            for _key_allocated in self.allocated:
                if self.allocated[_key_allocated]:
                    _field_dict[_key_allocated] = self.allocated[_key_allocated].to_dict()
            _dict['allocated'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of reservation
        if self.reservation:
            _dict['reservation'] = self.reservation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SchedulingV1beta1QueueStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allocated": dict(
                (_k, IoK8sApimachineryPkgApiResourceQuantity.from_dict(_v))
                for _k, _v in obj["allocated"].items()
            )
            if obj.get("allocated") is not None
            else None,
            "completed": obj.get("completed"),
            "inqueue": obj.get("inqueue"),
            "pending": obj.get("pending"),
            "reservation": SchedulingV1beta1Reservation.from_dict(obj["reservation"]) if obj.get("reservation") is not None else None,
            "running": obj.get("running"),
            "state": obj.get("state"),
            "unknown": obj.get("unknown")
        })
        return _obj


